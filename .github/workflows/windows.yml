name: Windows build

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '빌드할 브랜치 이름'
        required: true
        default: 'main'
        type: string

permissions:
  contents: write

jobs:
  WindowsBuild:
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v4.1.7
        
    - name: Get latest commit and check hash
      run: |
        $jsonFilePath = "latest_commits.json"
        $branchName = "${{ inputs.branch }}"
        $cloneDir = "${{ inputs.branch }}"
        
        git clone https://${{ secrets.ASE_GITHUB_TOKEN }}@github.com/${{ secrets.MY_REPO_URL }} $cloneDir --depth=1 --branch $branchName
        cd $cloneDir
        $latest_commit = (git log -1 --pretty=format:"%H").Trim()
        cd ..
        
        Write-Output "Latest commit hash for $branchName is $latest_commit"
        Add-Content -Path $env:GITHUB_ENV -Value "LATEST_COMMIT_HASH=$latest_commit"

        $hashesHashtable = @{}
        if (Test-Path $jsonFilePath) {
            try {
                $jsonContent = Get-Content $jsonFilePath -Raw
                if ($jsonContent.Trim()) {
                    $hashesHashtable = $jsonContent | ConvertFrom-Json -AsHashtable
                }
            } catch {
                 Write-Warning "Could not parse $jsonFilePath. Re-initializing."
                 $hashesHashtable = @{}
            }
        }
        
        $current_hash = $null
        if ($hashesHashtable.ContainsKey($branchName)) {
            $current_hash = $hashesHashtable[$branchName]
        }
        
        if ($latest_commit -eq $current_hash) {
            Write-Output "Hashes are the same for branch $branchName"
            Add-Content -Path $env:GITHUB_ENV -Value "hashes_are_same=true"
        } else {
            Write-Output "Hashes are different for branch $branchName. New: $latest_commit, Old: $current_hash"
            Add-Content -Path $env:GITHUB_ENV -Value "hashes_are_same=false"
        }

    - name: Get Access Token using Refresh Token
      if: env.hashes_are_same == 'false'
      run: |
        $body = @{
            "client_id" = "${{ secrets.CLIENT_ID }}"
            "client_secret" = "${{ secrets.CLIENT_SECRET }}"
            "refresh_token" = "${{ secrets.REFRESH_TOKEN }}"
            "grant_type" = "refresh_token"
        }
        $response = Invoke-RestMethod -Uri "https://www.googleapis.com/oauth2/v4/token" -Body $body -Method POST
        Write-Output "::add-mask::$($response.access_token)"
        Add-Content -Path $env:GITHUB_ENV -Value "ACCESS_TOKEN=$($response.access_token)"
    
    - name: Restore Haxelib Cache
      uses: actions/cache@v4
      with:
        path: C:\haxelib\
        key: haxelib-v1-${{ inputs.branch }}
        restore-keys: |
          haxelib-v1-${{ inputs.branch }}
          haxelib-v1-
    
    - name: Restore Hxcpp Compile Cache
      uses: actions/cache@v4
      with:
        path: C:\cache\
        key: hxcpp-compile-v1-${{ inputs.branch }}-${{ env.LATEST_COMMIT_HASH }}
        restore-keys: |
          hxcpp-compile-v1-${{ inputs.branch }}-
          hxcpp-compile-v1-

    - uses: krdlab/setup-haxe@master
      if: env.hashes_are_same == 'false'
      with:
        haxe-version: 4.3.6
        
    - name: Install Haxelib
      if: env.hashes_are_same == 'false'
      run: |
        cd ${{ inputs.branch }}
        haxelib setup C:/haxelib
        haxelib install hxcpp --quiet --global
        .\setup\windows.bat
    
    - name: Compile
      if: env.hashes_are_same == 'false'
      run: |
        cd ${{ inputs.branch }}
        haxelib run lime build windows --app-version="4.0.0-${{ github.run_id }}" -DHXCPP_COMPILE_CACHE=C:/cache
    
    - name: Check latest Build file and get FileID
      if: env.hashes_are_same == 'false'
      run: |
        $headers = @{
          "Authorization" = "Bearer ${{ env.ACCESS_TOKEN }}"
        }
        $response = Invoke-RestMethod -Uri "https://www.googleapis.com/drive/v3/files" -Method Get -Headers $headers
        $LastNightPrayerFile = $response.files | Where-Object { $_.name -eq "LastNightPrayer.zip" } | Select-Object -First 1
        if ($LastNightPrayerFile) {
          Write-Output "::add-mask::$($LastNightPrayerFile.id)"
          Add-Content -Path $env:GITHUB_ENV -Value "UPLOADED_FILEID=$($LastNightPrayerFile.id)"
        }

    - name: Zip it and Upload Google Drive
      if: env.hashes_are_same == 'false'
      run: |
        Compress-Archive -Path ${{ inputs.branch }}/export/release/windows/bin -DestinationPath LastNightPrayer.zip -Update
        $headers = @{
          "Authorization" = "Bearer ${{ env.ACCESS_TOKEN }}"
          "Content-Type" = "multipart/related; boundary=boundary"
        }
        $metadata = @{
          name="LastNightPrayer.zip"
        } | ConvertTo-Json
        
        $fileBytes = [System.IO.File]::ReadAllBytes("LastNightPrayer.zip");
        $body = @(
          "--boundary",
          "Content-Type: application/json; charset=UTF-8",
          "",
          $metadata,
          "--boundary",
          "Content-Type: application/octet-stream",
          "Content-Transfer-Encoding: base64",
          "",
          [Convert]::ToBase64String($fileBytes),
          "--boundary--"
        ) -join "`r`n"
        $fileId = "${{ env.UPLOADED_FILEID }}"
        $uri = if ($fileId) {
          "https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=multipart"
        } else {
          "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"
        }
        $method = if ($fileId) { "PATCH" } else { "POST" }
        
        $response = Invoke-RestMethod -Method $method -Headers $headers -Uri $uri -Body $body

        $permission_body = @{
          role = "reader"
          type = "anyone"
        } | ConvertTo-Json

        Invoke-RestMethod -Method POST -Headers @{"Authorization"="Bearer ${{ env.ACCESS_TOKEN }}"} -Uri "https://www.googleapis.com/drive/v3/files/$($response.id)/permissions" -Body $permission_body -ContentType "application/json" | Out-Null
        if (-not $fileId) {
          Write-Output "::add-mask::$($response.id)"
          Add-Content -Path $env:GITHUB_ENV -Value "UPLOADED_FILEID=$($response.id)"
        }

    - name: Send Discord Webhook
      if: env.hashes_are_same == 'false'
      run: |
        $body = @{
          content = "[바로가기](<https://drive.google.com/file/d/${{ env.UPLOADED_FILEID }}/view?usp=sharing>)"
          embeds = @(
            @{
              id = 652627557
              title = "New Version Updated."
              description = "File Update!"
              color = 4067891
            }
          )
        } | ConvertTo-Json
        Invoke-RestMethod -Method POST -Headers @{"Content-Type"= "application/json"} -Uri ${{ secrets.WEBHOOK_URL }} -Body $body | Out-Null
    
    - name: Save Haxelib Cache
      uses: actions/cache@v4
      if: env.hashes_are_same == 'false' && steps.haxelib-cache.outputs.cache-hit != 'true'
      with:
        path: C:\haxelib\
        key: haxelib-v1-${{ inputs.branch }}

    - name: Save Hxcpp Compile Cache
      uses: actions/cache@v4
      if: env.hashes_are_same == 'false' && steps.hxcpp-cache.outputs.cache-hit != 'true'
      with:
        path: C:\cache\
        key: hxcpp-compile-v1-${{ inputs.branch }}-${{ env.LATEST_COMMIT_HASH }}
    
    - name: Update latest_commits.json in current repository
      if: env.hashes_are_same == 'false'
      run: |
        $jsonFilePath = "latest_commits.json"
        $branchName = "${{ inputs.branch }}"
        $latest_commit = "${{ env.LATEST_COMMIT_HASH }}"

        $hashesHashtable = @{}
        if (Test-Path $jsonFilePath) {
            try {
                $jsonContent = Get-Content $jsonFilePath -Raw
                if ($jsonContent.Trim()) {
                    $hashesHashtable = $jsonContent | ConvertFrom-Json -AsHashtable
                }
            } catch {
                 Write-Warning "Could not parse $jsonFilePath. Re-initializing."
                 $hashesHashtable = @{}
            }
        }
        
        $hashesHashtable[$branchName] = $latest_commit
        
        $hashesHashtable | ConvertTo-Json | Out-File -FilePath $jsonFilePath -Encoding UTF8 -Force
        
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add $jsonFilePath
        $current_date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        git commit -m "Update latest commit hash for branch $branchName at $current_date"
        git push
